package com.farm.javaFiles.functions;

import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ExecutionException;
import java.util.stream.Collectors;

import com.farm.firebase_connection.DataService;
import com.farm.javaFiles.Screens.AnimalHusbandry;
import com.farm.javaFiles.Screens.FarmImplements;
import com.farm.javaFiles.loginPage.AgricultureUI;

import javafx.geometry.Insets;
import javafx.scene.Scene;
import javafx.scene.control.Alert;
import javafx.scene.control.Alert.AlertType;
import javafx.scene.control.Button;
import javafx.scene.control.CheckBox;
import javafx.scene.control.ComboBox;
import javafx.scene.control.Label;
import javafx.scene.control.TextArea;
import javafx.scene.control.TextField;
import javafx.scene.image.Image;
import javafx.scene.image.ImageView;
import javafx.scene.layout.GridPane;
import javafx.scene.layout.HBox;
import javafx.scene.layout.VBox;
import javafx.scene.text.Font;
import javafx.scene.text.FontWeight;
import javafx.stage.Stage;

public class AnimalAdForm {
    Stage stage;
     public AnimalAdForm(Stage stage){
        this.stage = stage ;
    }

    String imageLink  ;

    public void animalHusbandryRegister(){

        Label nameLabel=new Label("Animal Husbandry");
        nameLabel.setFont(Font.font("Arial", FontWeight.THIN, 25));

         Label animalLabel = new Label("Animal Name*");
        TextField animalField = new TextField();
        animalField.setPromptText("E.g.Sahiwal Bull,Boar Goat,etc");
        // propertyTypeField.setPrefWidth(300);

        Label animalCategroryLabel = new Label("Category*");
        TextField animalCategoryField = new TextField();
        animalCategoryField.setPromptText("E.g. Bull,Goat etc");


        Label cityTownLabel = new Label("City/Town*");
        TextField cityTownField = new TextField();

        Label localityLabel = new Label("Locality*");
        TextField localityField = new TextField();

        Label mobileNumberLabel = new Label("Mobile Number*");
        TextField mobileNumberField = new TextField();

        
        Label price = new Label("Price*");
        TextField priceField = new TextField();

        Label descriptionLabel = new Label("Description");
        
        TextArea descriptionArea = new TextArea();
        descriptionArea.setWrapText(true);
        descriptionArea.setPrefWidth(300);  
        descriptionArea.setPrefHeight(100); 
        descriptionArea.setPromptText("A few lines about your animal.");
        descriptionArea.setWrapText(true);
        addTextLimiter(descriptionArea, 300);
        

        Label characterCountLabel = new Label("Character Count (0/300)");
        descriptionArea.textProperty().addListener((observable, oldValue, newValue) -> {
            characterCountLabel.setText("Character Count (" + newValue.length() + "/300)");
        });

        // Image upload section
        Label imageUploadLabel = new Label("We suggest you to upload image(s) to gain more business reach. The first image is the AD profile picture.*");
        
        Image uploadImage=new Image("assets/images/farmingImplements/imageUpload.jpg");

        HBox imageUploadBox = new HBox(10);
        for (int i = 0; i < 4; i++) {
            ImageView uploadImageView=new ImageView(uploadImage);
            uploadImageView.setFitHeight(30);
            uploadImageView.setFitWidth(30);
            Button uploadButton = new Button("",uploadImageView);
            uploadButton.setStyle(" -fx-border-color:grey; -fx-border-width: 2;-fx-border-style: dashed; -fx-background-color: white");
            uploadButton.getStyleClass().add("image-button");
            uploadButton.setPrefSize(80, 80);

            uploadButton.setOnAction(e->{
                ImagePickerExample obj = new ImagePickerExample(stage);
                obj.getImage();
                imageLink = obj.imageLink ;
                uploadImageView.setImage(new Image(imageLink));
            });
            
            imageUploadBox.getChildren().add(uploadButton);
          
        }

        Label adTitleLabel = new Label("Your Ad Title (Autogenerated)");

        // Post Ad Button
        Button postAdButton = new Button("Post Ad");
        postAdButton.setStyle("-fx-background-color: green; -fx-background-radius: 15; -fx-text-fill: white;");
        postAdButton.setOnAction(e->{
            Map<String,String> data =new HashMap<>();
            data.put("AnimalName",animalField.getText());
            data.put("City",cityTownField.getText());
            data.put("Locality",localityField.getText());
            data.put("MobileNumber",mobileNumberField.getText());
            data.put("Description",descriptionArea.getText());
            data.put("AnimalHusbandryImage",imageLink);
            data.put("Category",animalCategoryField.getText());
            data.put("price",priceField.getText());
             
            try{
                
               DataService.addData("AnimalHusbandry",animalField.getText(),data);
                
                animalField.clear();
             //   rentalFeeField.clear();
                
                cityTownField.clear();
                localityField.clear();
                mobileNumberField.clear();
                descriptionArea.clear();
                showAlert("Success", "Data added successfully");




             }catch(ExecutionException | InterruptedException ex){
                 ex.printStackTrace();
                showAlert("Error", "Failed to add data");
             }  
            
        });

        Button goBackButton = new Button("Go back");
        goBackButton.setStyle("-fx-background-color: green; -fx-background-radius: 15; -fx-text-fill: white;");
            goBackButton.setOnAction(e->{
                AnimalHusbandry obj  = new AnimalHusbandry(stage);
                obj.getanimalHusbandary();
        });

       

        // Layout setup
        GridPane gridPane = new GridPane();
        gridPane.setPadding(new Insets(20));
        gridPane.setHgap(10);
        gridPane.setVgap(10);

        gridPane.add(animalLabel, 0, 0);
        gridPane.add(animalField,  0, 1, 2, 1);
        gridPane.add(animalCategroryLabel,2,0);
        gridPane.add(animalCategoryField,2,1,2,1);

    //    gridPane.add(rentalDurationLabel, 0, 2);
    //    gridPane.add(rentalDurationComboBox, 0, 3);
     //   gridPane.add(rentalFeeLabel, 1, 2);
     //   gridPane.add(rentalFeeField, 1, 3);
    //    gridPane.add(fixedChargesCheckBox, 2, 3);
       gridPane.add(price, 0, 2);
       gridPane.add(priceField, 0, 3);
         gridPane.add(cityTownLabel, 0, 4);
        gridPane.add(cityTownField, 0, 5);
        gridPane.add(localityLabel, 1, 4);
        gridPane.add(localityField, 1, 5);
        gridPane.add(mobileNumberLabel, 0, 6);
        gridPane.add(mobileNumberField, 0, 7);
       
        gridPane.add(descriptionLabel, 0, 8, 3, 1);
        gridPane.add(descriptionArea, 0, 9, 3, 1);
        gridPane.add(characterCountLabel, 2, 10);

        VBox vBox = new VBox(10);
        vBox.setPadding(new Insets(20));
        vBox.getChildren().addAll(nameLabel,gridPane, imageUploadLabel, imageUploadBox, adTitleLabel, postAdButton,goBackButton);

        // Create a scene and set it to the stage
        Scene scene = new Scene(vBox, 1470, 900);
        stage.setTitle("Animal Ad Form");
        stage.setScene(scene);
        stage.show();
    }

    private void addTextLimiter(TextArea textArea, int maxLength) {
        textArea.textProperty().addListener((observable, oldValue, newValue) -> {
            if (newValue.length() > maxLength) {
                textArea.setText(oldValue);
            }
        });
    }

      void showAlert(String title, String message) {
        // Alert alert = new Alert(Alert.AlertType.INFORMATION);
        Alert alert = new Alert(Alert.AlertType.INFORMATION);
        alert.setTitle(title);
        alert.setHeaderText(null);
        alert.setContentText(message);
        alert.showAndWait();
    }
     private boolean categoryExists(String category) {
     List <String> availableCategories = AgricultureUI.farmImplementsData.stream()
                .map(item -> item.get("Category"))
                .distinct()
                .collect(Collectors.toList());
    return availableCategories.contains(category);
}

// Method to show an alert
// private void showAlert(String title, String message) {
//     Alert alert = new Alert(AlertType.INFORMATION);
//     alert.setTitle(title);
//     alert.setHeaderText(null);
//     alert.setContentText(message);
//     alert.showAndWait();
// }
}
